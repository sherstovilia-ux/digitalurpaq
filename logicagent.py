import streamlit as st
import requests
from streamlit_lottie import st_lottie

# ---- Page setup ----
st.set_page_config(
    page_title="Digital Urpaq Support Bot",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# ---- Clean UI ----
st.markdown("""
    <style>
        header {visibility: hidden;}
        footer {visibility: hidden;}
        #MainMenu {visibility: hidden;}
        .block-container {padding-top: 1rem; padding-bottom: 1rem;}
        .chat-bubble {
            border-radius: 20px;
            padding: 10px 15px;
            margin: 8px 0;
            max-width: 80%;
            word-wrap: break-word;
        }
        .user-bubble {
            background-color: #DCF8C6;
            align-self: flex-end;
        }
        .bot-bubble {
            background-color: #F1F0F0;
            align-self: flex-start;
        }
        .chat-container {
            display: flex;
            flex-direction: column;
        }
        .robot-animation {
            display: flex;
            justify-content: center;
            margin-bottom: 1rem;
        }
    </style>
""", unsafe_allow_html=True)

# ---- Load Lottie ----
def load_lottie_url(url: str):
    try:
        r = requests.get(url)
        if r.status_code == 200:
            return r.json()
    except:
        return None

def load_lottie_local(filepath: str):
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return f.read()
    except:
        return None

# Try online first, fallback to local
lottie_robot = load_lottie_url("https://assets2.lottiefiles.com/packages/lf20_jqz7l0di.json")
if not lottie_robot:
    lottie_robot = load_lottie_local("robot.json")

# ---- Responses ----
responses = {
    "–∫–æ–Ω—Ç–∞–∫—Ç—ã": "üìû –ê–¥—Ä–µ—Å: —É–ª. –ñ–∞–º–±—ã–ª–∞ –ñ–∞–±–∞–µ–≤–∞ 55–ê, –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫. –¢–µ–ª–µ—Ñ–æ–Ω: 8 7152 34-02-40.",
    "–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª": "üé≠ –í –∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏ –∞–∫—Ç–æ–≤—ã—Ö –∑–∞–ª–∞...",
    "–ø–æ–º–æ—â—å": "üß≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –∫–∞–±–∏–Ω–µ—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ>, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞–∫—Ç–æ–≤—ã–π –∑–∞–ª, –∑–∞–ø–∏—Å—å, –ø–æ–º–æ—â—å.",
    "–∑–∞–ø–∏—Å—å": "üóìÔ∏è –û–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞: https://docs.google.com/forms/...",
}

cabinet_map = {
    "–ª–µ–≥–æ": "üß© –ö–∞–±–∏–Ω–µ—Ç LEGO-–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî 1 —ç—Ç–∞–∂, –ø—Ä–∞–≤–æ–µ –∫—Ä—ã–ª–æ...",
    "—Ä–æ–±–æ—Ç—ã": "ü§ñ –ö–∞–±–∏–Ω–µ—Ç –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ ‚Äî 2 —ç—Ç–∞–∂, –ª–µ–≤–æ–µ –∫—Ä—ã–ª–æ, –∫–æ–Ω–µ—Ü –∫–æ—Ä–∏–¥–æ—Ä–∞.",
}

# ---- Session state ----
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "bot", "text": "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ Digital Urpaq."}]

# ---- Chat UI ----
st.title("ü§ñ Digital Urpaq Support Bot")

# Robot animation
if lottie_robot:
    st_lottie(lottie_robot, height=150, key="robot_animation", speed=1)

chat_placeholder = st.empty()
with chat_placeholder.container():
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    for msg in st.session_state.messages:
        bubble_class = "user-bubble" if msg["role"] == "user" else "bot-bubble"
        st.markdown(f'<div class="chat-bubble {bubble_class}">{msg["text"]}</div>', unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

# ---- Input area ----
st.markdown("---")
user_input = st.text_input("‚úèÔ∏è –í–∞—à –≤–æ–ø—Ä–æ—Å:", key="input", placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
col1, col2 = st.columns([5, 1])
with col2:
    send = st.button("üì©")

# ---- Logic ----
if send and user_input:
    user_msg = user_input.strip()
    st.session_state.messages.append({"role": "user", "text": user_msg})

    message = user_msg.lower()
    reply = None

    if "–∫–∞–±–∏–Ω–µ—Ç" in message:
        for name, location in cabinet_map.items():
            if name in message:
                reply = location
                break
        if not reply:
            reply = "üè¢ –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞."
    else:
        for k, v in responses.items():
            if k in message:
                reply = v
                break

    if not reply:
        reply = "‚ùì –ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å'."

    st.session_state.messages.append({"role": "bot", "text": reply})
    st.experimental_rerun()

