import streamlit as st
import asyncio
from pathlib import Path
import edge_tts

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
# ---------------------------
async def text_to_speech(text: str, filename: str = "output.mp3", language: str = "ru"):
    """
    text: —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
    filename: –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    language: 'ru' –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ, 'en' –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
    """
    if language == "ru":
        voice = "ru-RU-SvetlanaNeural"
    else:
        voice = "en-US-AriaNeural"

    communicate = edge_tts.Communicate(text, voice)
    await communicate.save(filename)

# ---------------------------
# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# ---------------------------
st.set_page_config(page_title="Text-to-Speech TTS", page_icon="üîä")

st.title("üîä Text-to-Speech (TTS)")

st.markdown("""
–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏.  
–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∞—É–¥–∏–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
""")

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
user_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏:")

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
language_option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏:", ("–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"))

# –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"):
    if user_text.strip() == "":
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!")
    else:
        st.info("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ...")
        audio_file = Path("output.mp3")
        lang_code = "ru" if language_option == "–†—É—Å—Å–∫–∏–π" else "en"
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ TTS
            asyncio.run(text_to_speech(user_text, str(audio_file), language=lang_code))
            st.success("‚úÖ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ!")
            st.audio(str(audio_file))
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
