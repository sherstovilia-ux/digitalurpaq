import streamlit as st
from google.cloud import texttospeech
import base64

# ---- Page setup ----
st.set_page_config(page_title="Digital Urpaq Support Bot", layout="wide")

# ---- Session state ----
if "lang" not in st.session_state:
    st.session_state.lang = "ru"
if "messages" not in st.session_state:
    st.session_state.messages = [{"role":"bot","text":"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ Digital Urpaq."}]
if "tts_enabled" not in st.session_state:
    st.session_state.tts_enabled = True
if "pending_audio" not in st.session_state:
    st.session_state.pending_audio = None

# ---- Language toggle ----
col1, col2 = st.columns([4,1])
with col2:
    if st.button("“ö–∞–∑ / –†—É—Å"):
        st.session_state.lang = "kk" if st.session_state.lang=="ru" else "ru"
        st.session_state.messages.append({
            "role":"bot",
            "text": "–¢—ñ–ª “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–µ –∞—É—ã—Å—Ç—ã—Ä—ã–ª–¥—ã." if st.session_state.lang=="kk" else "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π."
        })

# ---- TTS ----
def make_tts(text, lang_code):
    client = texttospeech.TextToSpeechClient()

    voice_name = "kk-KZ-Standard-A" if lang_code=="kk" else "ru-RU-Standard-D"
    language_code = "kk-KZ" if lang_code=="kk" else "ru-RU"

    synthesis_input = texttospeech.SynthesisInput(text=text)
    voice = texttospeech.VoiceSelectionParams(
        language_code=language_code,
        name=voice_name,
        ssml_gender=texttospeech.SsmlVoiceGender.NEUTRAL
    )
    audio_config = texttospeech.AudioConfig(audio_encoding=texttospeech.AudioEncoding.MP3)

    response = client.synthesize_speech(input=synthesis_input, voice=voice, audio_config=audio_config)
    b64 = base64.b64encode(response.audio_content).decode()
    return f"data:audio/mp3;base64,{b64}"

# ---- Chat display ----
st.title("ü§ñ Digital Urpaq Support Bot")
for msg in st.session_state.messages:
    style = "text-align:right; background:#DCF8C6;padding:10px;border-radius:15px;" if msg["role"]=="user" else "text-align:left; background:#F1F0F0;padding:10px;border-radius:15px;"
    st.markdown(f'<div style="{style}">{msg["text"]}</div>', unsafe_allow_html=True)

# ---- Input ----
placeholder = "–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑..." if st.session_state.lang=="kk" else "–í–∞—à –≤–æ–ø—Ä–æ—Å:"
user_input = st.text_input(placeholder, placeholder=placeholder)
send = st.button("–ñ—ñ–±–µ—Ä—É" if st.session_state.lang=="kk" else "–û—Ç–ø—Ä–∞–≤–∏—Ç—å")

# ---- Simple responses ----
responses_ru = {
    "–∫–æ–Ω—Ç–∞–∫—Ç—ã": "–ê–¥—Ä–µ—Å: —É–ª. –ñ–∞–º–±—ã–ª–∞ –ñ–∞–±–∞–µ–≤–∞ 55–ê, –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫. –¢–µ–ª–µ—Ñ–æ–Ω: 8 7152 34-02-40.",
    "–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª": "–í –∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏ –∞–∫—Ç–æ–≤—ã—Ö –∑–∞–ª–∞.",
    "–ø–æ–º–æ—â—å": "–ö–æ–º–∞–Ω–¥—ã: –∫–∞–±–∏–Ω–µ—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ>, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞–∫—Ç–æ–≤—ã–π –∑–∞–ª, –ø–æ–º–æ—â—å."
}
responses_kk = {
    "–±–∞–π–ª–∞–Ω—ã—Å": "–ú–µ–∫–µ–Ω–∂–∞–π: –ñ–∞–º–±—ã–ª –ñ–∞–±–∞–µ–≤ –∫”©—à., 55–ê, –ü–µ—Ç—Ä–æ–ø–∞–≤–ª.",
    "–∞–∫—Ç –∑–∞–ª—ã": "“í–∏–º–∞—Ä–∞—Ç—Ç–∞ “Ø—à –∞–∫—Ç –∑–∞–ª—ã –±–∞—Ä.",
    "–∫”©–º–µ–∫": "“ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä: –∫–∞–±–∏–Ω–µ—Ç <–∞—Ç–∞—É—ã>, –±–∞–π–ª–∞–Ω—ã—Å, –∞–∫—Ç –∑–∞–ª—ã, –∫”©–º–µ–∫."
}
cabinet_map_ru = {"—Ñ–∏–∑–∏–∫–∞":"–ö–∞–±–∏–Ω–µ—Ç –§–∏–∑–∏–∫–∏ ‚Äî 3 —ç—Ç–∞–∂."}
cabinet_map_kk = {"—Ñ–∏–∑–∏–∫–∞":"–§–∏–∑–∏–∫–∞ –∫–∞–±–∏–Ω–µ—Ç—ñ ‚Äî 3 “õ–∞–±–∞—Ç."}

# ---- Handle user input ----
if send and user_input:
    msg = user_input.strip()
    st.session_state.messages.append({"role":"user","text":msg})
    message = msg.lower()
    reply = None

    responses = responses_kk if st.session_state.lang=="kk" else responses_ru
    cabinet_map = cabinet_map_kk if st.session_state.lang=="kk" else cabinet_map_ru
    lang_code = "kk" if st.session_state.lang=="kk" else "ru"

    if "–∫–∞–±–∏–Ω–µ—Ç" in message:
        found = False
        for k,v in cabinet_map.items():
            if k in message:
                reply = v
                found = True
                break
        if not found:
            reply = "–£—Ç–æ—á–Ω–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç?" if lang_code=="ru" else "“ö–∞–π –∫–∞–±–∏–Ω–µ—Ç –µ–∫–µ–Ω—ñ–Ω –Ω–∞“õ—Ç—ã–ª–∞“£—ã–∑—à—ã?"
    else:
        found = False
        for k,v in responses.items():
            if k in message:
                reply = v
                found = True
                break
        if not found:
            reply = "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å'." if lang_code=="ru" else "–¢“Ø—Å—ñ–Ω–±–µ–¥—ñ–º. '–ö”©–º–µ–∫' –¥–µ–ø –∂–∞–∑—ã“£—ã–∑."

    st.session_state.messages.append({"role":"bot","text":reply})
    if st.session_state.tts_enabled:
        st.session_state.pending_audio = make_tts(reply, lang_code)

# ---- Play TTS ----
if st.session_state.pending_audio:
    st.markdown(f"""
        <audio autoplay>
            <source src="{st.session_state.pending_audio}" type="audio/mp3">
        </audio>
    """, unsafe_allow_html=True)
    st.session_state.pending_audio = None


