import streamlit as st
from google.cloud import texttospeech
import base64

# ---- Page setup ----
st.set_page_config(page_title="Digital Urpaq Support Bot", layout="wide")

# ---- CSS ----
st.markdown("""
<style>
header, footer, #MainMenu {visibility: hidden;}
.banner img {width: 100%; max-height: 250px; object-fit: cover; border-radius: 10px;}
.chat-bubble {border-radius: 20px; padding: 10px 15px; margin: 8px 0; max-width: 80%; word-wrap: break-word;}
.user-bubble {background-color: #DCF8C6; align-self: flex-end;}
.bot-bubble {background-color: #F1F0F0; align-self: flex-start;}
.chat-container {display: flex; flex-direction: column;}
#mic-indicator {text-align: center; font-size: 18px; margin-top: 10px;}
.mic {display: inline-block; margin-left: 10px; animation: pulse 1s infinite;}
@keyframes pulse {0% {transform: scale(1); opacity: 1;} 50% {transform: scale(1.3); opacity: 0.5;} 100% {transform: scale(1); opacity: 1;}}
</style>
""", unsafe_allow_html=True)

# ---- Banner ----
st.markdown("""<div class="banner"><img src="https://s12.gifyu.com/images/b36xz.gif" alt="Banner"></div>""", unsafe_allow_html=True)

# ---- Session ----
if "lang" not in st.session_state: st.session_state.lang = "ru"
if "messages" not in st.session_state: st.session_state.messages = [{"role": "bot","text": "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ Digital Urpaq. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–∞–±–∏–Ω–µ—Ç–∞—Ö, –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏–ª–∏ –∑–∞–ø–∏—Å–∏."}]
if "tts_enabled" not in st.session_state: st.session_state.tts_enabled = True
if "tts_lang" not in st.session_state: st.session_state.tts_lang = st.session_state.lang  # —è–∑—ã–∫ TTS
if "pending_audio" not in st.session_state: st.session_state.pending_audio = None

# ---- Language Switcher ----
col1, col2, col3 = st.columns([3,1,1])
with col2:
    if st.button("“ö–∞–∑ / –†—É—Å"):
        st.session_state.lang = "kk" if st.session_state.lang == "ru" else "ru"
        st.session_state.messages.append({
            "role":"bot",
            "text": "–¢—ñ–ª “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–µ –∞—É—ã—Å—Ç—ã—Ä—ã–ª–¥—ã." if st.session_state.lang=="kk" else "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π."
        })
        st.rerun()
with col3:
    if st.button("TTS: “ö–∞–∑ / –†—É—Å"):
        st.session_state.tts_lang = "kk" if st.session_state.tts_lang=="ru" else "ru"

# ---- Responses ----
responses_ru = {
    "–∫–æ–Ω—Ç–∞–∫—Ç—ã": "–ê–¥—Ä–µ—Å: —É–ª. –ñ–∞–º–±—ã–ª–∞ –ñ–∞–±–∞–µ–≤–∞ 55–ê, –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫. –¢–µ–ª–µ—Ñ–æ–Ω: 8 7152 34-02-40. –¢–∞–∫–∂–µ —Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∞–π—Ç: https://digitalurpaq.edu.kz/ru/kkbajlanysrukontakty.html",
    "–∞–∫—Ç–æ–≤—ã–π –∑–∞–ª": "–í –∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏ –∞–∫—Ç–æ–≤—ã—Ö –∑–∞–ª–∞: –ø–µ—Ä–≤—ã–π ‚Äî –Ω–∞–¥ –ª–æ–±–±–∏, –≤—Ç–æ—Ä–æ–π ‚Äî –≤ –ª–µ–≤–æ–º –∫—Ä—ã–ª–µ, —Ç—Ä–µ—Ç–∏–π ‚Äî –≤ —É—á–µ–±–Ω–æ–º –±–ª–æ–∫–µ —Ä—è–¥–æ–º —Å IT-–∫–∞–±–∏–Ω–µ—Ç–∞–º–∏.",
    "–ø–æ–º–æ—â—å": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –∫–∞–±–∏–Ω–µ—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ>, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞–∫—Ç–æ–≤—ã–π –∑–∞–ª, –∑–∞–ø–∏—Å—å, –ø–æ–º–æ—â—å.",
    "–∑–∞–ø–∏—Å—å": "–û–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞: https://docs.google.com/forms/d/e/1FAIpQLSc5a5G0CY5XuOCpVHcg7qTDBdEGGkyVEjuBwihpfHncDCqv2A/viewform",
}
responses_kk = {
    "–±–∞–π–ª–∞–Ω—ã—Å": "–ú–µ–∫–µ–Ω–∂–∞–π: –ñ–∞–º–±—ã–ª –ñ–∞–±–∞–µ–≤ –∫”©—à., 55–ê, –ü–µ—Ç—Ä–æ–ø–∞–≤–ª. –¢–µ–ª–µ—Ñ–æ–Ω: 8 7152 34-02-40. –¢–æ–ª—ã“ì—ã—Ä–∞“õ: https://digitalurpaq.edu.kz/kk/kkbajlanysrukontakty.html",
    "–∞–∫—Ç –∑–∞–ª—ã": "“í–∏–º–∞—Ä–∞—Ç—Ç–∞ “Ø—à –∞–∫—Ç –∑–∞–ª—ã –±–∞—Ä: –±—ñ—Ä—ñ–Ω—à—ñ—Å—ñ ‚Äî –≤–µ—Å—Ç–∏–±—é–ª—å “Ø—Å—Ç—ñ–Ω–¥–µ, –µ–∫—ñ–Ω—à—ñ—Å—ñ ‚Äî —Å–æ–ª “õ–∞–Ω–∞—Ç—Ç–∞, “Ø—à—ñ–Ω—à—ñ—Å—ñ ‚Äî IT –∫–∞–±–∏–Ω–µ—Ç—Ç–µ—Ä—ñ–Ω—ñ“£ –∂–∞–Ω—ã–Ω–¥–∞“ì—ã –æ“õ—É –±–ª–æ–≥—ã–Ω–¥–∞.",
    "–∫”©–º–µ–∫": "“ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä: –∫–∞–±–∏–Ω–µ—Ç <–∞—Ç–∞—É—ã>, –±–∞–π–ª–∞–Ω—ã—Å, –∞–∫—Ç –∑–∞–ª—ã, –∂–∞–∑—ã–ª—É, –∫”©–º–µ–∫.",
    "–∂–∞–∑—ã–ª—É": "–û–Ω–ª–∞–π–Ω –Ω—ã—Å–∞–Ω: https://docs.google.com/forms/d/e/1FAIpQLSc5a5G0CY5XuOCpVHcg7qTDBdEGGkyVEjuBwihpfHncDCqv2A/viewform",
}
cabinet_map_ru = {"–ª–µ–≥–æ":"–ö–∞–±–∏–Ω–µ—Ç LEGO ‚Äî 1 —ç—Ç–∞–∂, –ø—Ä–∞–≤–æ–µ –∫—Ä—ã–ª–æ.","—Ñ–∏–∑–∏–∫–∞":"–ö–∞–±–∏–Ω–µ—Ç –§–∏–∑–∏–∫–∏ ‚Äî –ª–µ–≤–æ–µ –∫—Ä—ã–ª–æ, 3 —ç—Ç–∞–∂.","—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞":"–ö–∞–±–∏–Ω–µ—Ç –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ ‚Äî 2 —ç—Ç–∞–∂, –ª–µ–≤–æ–µ –∫—Ä—ã–ª–æ."}
cabinet_map_kk = {"–ª–µ–≥–æ":"LEGO-“õ“±—Ä–∞—Å—Ç—ã—Ä—É –∫–∞–±–∏–Ω–µ—Ç—ñ ‚Äî 1 “õ–∞–±–∞—Ç, –æ“£ –∂–∞“õ “õ–∞–Ω–∞—Ç.","—Ñ–∏–∑–∏–∫–∞":"–§–∏–∑–∏–∫–∞ –∫–∞–±–∏–Ω–µ—Ç—ñ ‚Äî —Å–æ–ª –∂–∞“õ “õ–∞–Ω–∞—Ç, 3 “õ–∞–±–∞—Ç.","—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞":"–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∫–∞–±–∏–Ω–µ—Ç—ñ ‚Äî 2 “õ–∞–±–∞—Ç, —Å–æ–ª –∂–∞“õ “õ–∞–Ω–∞—Ç."}

# ---- TTS Function ----
def make_tts(text: str, lang_code: str):
    client = texttospeech.TextToSpeechClient()
    if lang_code=="kk": language, voice="kk-KZ","kk-KZ-Standard-A"
    else: language, voice="ru-RU","ru-RU-Standard-D"
    input_text = texttospeech.SynthesisInput(text=text)
    voice_params = texttospeech.VoiceSelectionParams(language_code=language,name=voice,ssml_gender=texttospeech.SsmlVoiceGender.NEUTRAL)
    audio_config = texttospeech.AudioConfig(audio_encoding=texttospeech.AudioEncoding.MP3)
    response = client.synthesize_speech(input=input_text, voice=voice_params, audio_config=audio_config)
    b64 = base64.b64encode(response.audio_content).decode()
    return f"data:audio/mp3;base64,{b64}"

# ---- Chat UI ----
st.title("ü§ñ Digital Urpaq Support Bot")
with st.container():
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    for msg in st.session_state.messages:
        bubble = "user-bubble" if msg["role"]=="user" else "bot-bubble"
        st.markdown(f'<div class="chat-bubble {bubble}">{msg["text"]}</div>', unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

# ---- Input ----
placeholder = "–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑..." if st.session_state.lang=="kk" else "–í–∞—à –≤–æ–ø—Ä–æ—Å:"
user_input = st.text_input(placeholder, placeholder=placeholder)
send = st.button("–ñ—ñ–±–µ—Ä—É" if st.session_state.lang=="kk" else "–û—Ç–ø—Ä–∞–≤–∏—Ç—å")

# ---- Logic ----
if send and user_input:
    msg = user_input.strip()
    st.session_state.messages.append({"role":"user","text":msg})
    message = msg.lower(); reply=None

    # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏
    if st.session_state.lang=="ru": responses,cabinet_map,ask_cabinet,res_lang = responses_ru,cabinet_map_ru,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –∫–∞–±–∏–Ω–µ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.",st.session_state.tts_lang
    else: responses,cabinet_map,ask_cabinet,res_lang = responses_kk,cabinet_map_kk,"“ö–∞–π –∫–∞–±–∏–Ω–µ—Ç—Ç—ñ –±—ñ–ª–≥—ñ“£—ñ–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ —Ç—É—Ä–∞–ª—ã –Ω–∞“õ—Ç—ã–ª–∞“£—ã–∑.",st.session_state.tts_lang

    if "–≤—ã–∫–ª—é—á–∏ –≥–æ–ª–æ—Å" in message or "–¥—ã–±—ã—Å—Ç—ã —Å”©–Ω–¥—ñ—Ä" in message:
        st.session_state.tts_enabled=False
        reply="–ì–æ–ª–æ—Å –æ—Ç–∫–ª—é—á–µ–Ω." if st.session_state.lang=="ru" else "–î—ã–±—ã—Å —Å”©–Ω–¥—ñ—Ä—ñ–ª–¥—ñ."
    elif "–≤–∫–ª—é—á–∏ –≥–æ–ª–æ—Å" in message or "–¥—ã–±—ã—Å—Ç—ã “õ–æ—Å" in message:
        st.session_state.tts_enabled=True
        reply="–ì–æ–ª–æ—Å –≤–∫–ª—é—á–µ–Ω." if st.session_state.lang=="ru" else "–î—ã–±—ã—Å “õ–æ—Å—ã–ª–¥—ã."
    elif message.strip() in ["–∫–∞–±–∏–Ω–µ—Ç","–∫–∞–±–∏–Ω–µ—Ç?"]: reply=ask_cabinet
    elif any(k in message for k in cabinet_map.keys()):
        for k,v in cabinet_map.items(): 
            if k in message: reply=v; break
    else:
        for k,v in responses.items(): 
            if k in message: reply=v; break
    if not reply: reply=("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å'." if st.session_state.lang=="ru" else "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ–º. '–ö”©–º–µ–∫' –¥–µ–ø –∂–∞–∑—ã“£—ã–∑.")

    st.session_state.messages.append({"role":"bot","text":reply})

    # ---- TTS ----
    if st.session_state.tts_enabled:
        st.session_state.pending_audio = make_tts(reply,res_lang)
    st.rerun()

# ---- Audio Playback ----
if st.session_state.pending_audio:
    st.markdown('<div id="mic-indicator">üé§ <span class="mic">–ì–æ–≤–æ—Ä—é...</span></div>', unsafe_allow_html=True)
    st.markdown(f"""
        <audio id="bot_audio" autoplay>
            <source src="{st.session_state.pending_audio}" type="audio/mp3">
        </audio>
        <script>
            const audio = document.getElementById('bot_audio');
            audio.onended = () => {{
                const mic = document.getElementById('mic-indicator');
                if (mic) mic.style.display = 'none';
            }};
        </script>
    """, unsafe_allow_html=True)
    st.session_state.pending_audio=None
